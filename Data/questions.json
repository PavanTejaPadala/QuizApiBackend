[
  {
    "QnId": 1,
    "QnInWords": "Your team is working on an application that must have a single instance managing logging functionality across various modules. Which design pattern would ensure only one logging instance is created?",
    "ImageName": null,
    "Option1": "Singleton",
    "Option2": "Observer",
    "Option3": "Factory",
    "Option4": "Decorator",
    "Answer": 1,
    "Category": "Design Patterns"
  },
  {
    "QnId": 2,
    "QnInWords": "You are designing a UI library where buttons, checkboxes, and other controls need to be created for different operating systems without changing the code. Which pattern would best allow this flexibility?",
    "ImageName": null,
    "Option1": "Factory Method",
    "Option2": "Adapter",
    "Option3": "Observer",
    "Option4": "Facade",
    "Answer": 1,
    "Category": "Design Patterns"
  },
  {
    "QnId": 3,
    "QnInWords": "Your company requires a solution to send updates to many subscribers when the stock price changes. Which design pattern can best handle this kind of notification system?",
    "ImageName": null,
    "Option1": "Observer",
    "Option2": "Prototype",
    "Option3": "Chain of Responsibility",
    "Option4": "Flyweight",
    "Answer": 1,
    "Category": "Design Patterns"
  },
  {
    "QnId": 4,
    "QnInWords": "A client requests a simple interface to manage complex backend operations in their e-commerce application, hiding unnecessary details from the frontend. Which pattern would provide this solution?",
    "ImageName": null,
    "Option1": "Facade",
    "Option2": "Decorator",
    "Option3": "Adapter",
    "Option4": "Proxy",
    "Answer": 1,
    "Category": "Design Patterns"
  },
  {
    "QnId": 5,
    "QnInWords": "You need to add encryption to data transmitted over a network without changing the code that handles data transmission. Which design pattern would allow you to add this functionality dynamically?",
    "ImageName": null,
    "Option1": "Decorator",
    "Option2": "Bridge",
    "Option3": "Composite",
    "Option4": "Prototype",
    "Answer": 1,
    "Category": "Design Patterns"
  },
  {
    "QnId": 6,
    "QnInWords": "While building a banking application, you need to restrict direct access to a user’s sensitive data. Which OOP concept allows you to achieve this data hiding?",
    "ImageName": null,
    "Option1": "Encapsulation",
    "Option2": "Polymorphism",
    "Option3": "Inheritance",
    "Option4": "Abstraction",
    "Answer": 1,
    "Category": "Object-Oriented Programming"
  },
  {
    "QnId": 7,
    "QnInWords": "You need to create a class hierarchy for different types of accounts (savings, current, business) in a banking system. Each account should inherit common properties. Which OOP principle best suits this design?",
    "ImageName": null,
    "Option1": "Inheritance",
    "Option2": "Encapsulation",
    "Option3": "Abstraction",
    "Option4": "Polymorphism",
    "Answer": 1,
    "Category": "Object-Oriented Programming"
  },
  {
    "QnId": 8,
    "QnInWords": "A client requests a simple interface to manage complex backend operations in their e-commerce application, hiding unnecessary details from the frontend. Which pattern would provide this solution?",
    "ImageName": null,
    "Option1": "Facade",
    "Option2": "Decorator",
    "Option3": "Adapter",
    "Option4": "Proxy",
    "Answer": 1,
    "Category": "Object-Oriented Programming"
  },
  {
    "QnId": 9,
    "QnInWords": "In a library management system, you want to expose only the most important details to the public while hiding the internal structure. Which OOP concept would help achieve this?",
    "ImageName": null,
    "Option1": "Abstraction",
    "Option2": "Inheritance",
    "Option3": "Polymorphism",
    "Option4": "Encapsulation",
    "Answer": 1,
    "Category": "Object-Oriented Programming"
  },
  {
    "QnId": 10,
    "QnInWords": "A user interface in an application has elements like text boxes and checkboxes, which require similar functionalities but distinct implementations. Which OOP concept would help achieve this behavior?",
    "ImageName": null,
    "Option1": "Polymorphism",
    "Option2": "Encapsulation",
    "Option3": "Abstraction",
    "Option4": "Inheritance",
    "Answer": 1,
    "Category": "Object-Oriented Programming"
  },
  {
    "QnId": 11,
    "QnInWords": "You need to implement a system that allows patients to wait in line for treatment at a hospital, served on a first-come, first-served basis. Which data structure would best suit this scenario?",
    "ImageName": null,
    "Option1": "Queue",
    "Option2": "Stack",
    "Option3": "Linked List",
    "Option4": "Binary Tree",
    "Answer": 1,
    "Category": "Data Structures"
  },
  {
    "QnId": 12,
    "QnInWords": "A system requires efficient access to recent user actions, where only the latest action is processed first. Which data structure fits this Last-In-First-Out requirement?",
    "ImageName": null,
    "Option1": "Stack",
    "Option2": "Queue",
    "Option3": "Array",
    "Option4": "Linked List",
    "Answer": 1,
    "Category": "Data Structures"
  },
  {
    "QnId": 13,
    "QnInWords": "You’re designing a system for airline check-in, and you want to serve passengers based on their ticket priority. Which data structure is best suited for prioritizing service?",
    "ImageName": null,
    "Option1": "Priority Queue",
    "Option2": "Array",
    "Option3": "Linked List",
    "Option4": "Deque",
    "Answer": 1,
    "Category": "Data Structures"
  },
  {
    "QnId": 14,
    "QnInWords": "To enhance performance in your company's app, you need to quickly look up customer records based on a unique ID. Which data structure would provide efficient direct access to data?",
    "ImageName": null,
    "Option1": "Hash Table",
    "Option2": "Queue",
    "Option3": "Linked List",
    "Option4": "Binary Search Tree",
    "Answer": 1,
    "Category": "Data Structures"
  },
  {
    "QnId": 15,
    "QnInWords": "For a directory structure on a file system where each folder can contain subfolders, which data structure is most appropriate?",
    "ImageName": null,
    "Option1": "Tree",
    "Option2": "Array",
    "Option3": "Queue",
    "Option4": "Stack",
    "Answer": 1,
    "Category": "Data Structures"
  },
  {
    "QnId": 16,
    "QnInWords": "You’re designing a search feature for an app that will search a sorted list of products by name. Which algorithm provides the fastest search in a sorted list?",
    "ImageName": null,
    "Option1": "Binary Search",
    "Option2": "Linear Search",
    "Option3": "Bubble Sort",
    "Option4": "Insertion Sort",
    "Answer": 1,
    "Category": "Algorithms"
  },
  {
    "QnId": 17,
    "QnInWords": "For a payment gateway, you want to quickly determine whether a specific user exists within a large list. Which search algorithm will provide the quickest result?",
    "ImageName": null,
    "Option1": "Binary Search",
    "Option2": "Linear Search",
    "Option3": "Depth-First Search",
    "Option4": "Breadth-First Search",
    "Answer": 1,
    "Category": "Algorithms"
  },
  {
    "QnId": 18,
    "QnInWords": "Your application requires sorting of a large dataset with unpredictable ordering. Which algorithm is best suited for the average case when sorting random data?",
    "ImageName": null,
    "Option1": "Merge Sort",
    "Option2": "Quick Sort",
    "Option3": "Selection Sort",
    "Option4": "Bubble Sort",
    "Answer": 2,
    "Category": "Algorithms"
  },
  {
    "QnId": 19,
    "QnInWords": "In a social media app, you need to implement a search feature that finds the shortest path between two users based on their friendships. Which algorithm would be most appropriate?",
    "ImageName": null,
    "Option1": "Breadth-First Search",
    "Option2": "Dijkstra's Algorithm",
    "Option3": "Depth-First Search",
    "Option4": "A* Search",
    "Answer": 1,
    "Category": "Algorithms"
  },
  {
    "QnId": 20,
    "QnInWords": "You need to find the shortest path in a weighted graph for an online mapping service. Which algorithm is most efficient for this purpose?",
    "ImageName": null,
    "Option1": "Dijkstra's Algorithm",
    "Option2": "Breadth-First Search",
    "Option3": "Binary Search",
    "Option4": "Quick Sort",
    "Answer": 1,
    "Category": "Algorithms"
  },
  {
    "QnId": 21,
    "QnInWords": "You are developing an application that needs to retrieve customer details from a database. Which SQL statement would you use to extract this data?",
    "ImageName": null,
    "Option1": "SELECT",
    "Option2": "GET",
    "Option3": "EXTRACT",
    "Option4": "FETCH",
    "Answer": 1,
    "Category": "Databases"
  },
  {
    "QnId": 22,
    "QnInWords": "In a company database, you are tasked with ensuring that each employee has a unique identifier. What is the term for this unique identifier in a relational database?",
    "ImageName": null,
    "Option1": "Primary key",
    "Option2": "Foreign key",
    "Option3": "Index",
    "Option4": "Duplicate record",
    "Answer": 1,
    "Category": "Databases"
  },
  {
    "QnId": 23,
    "QnInWords": "Your team needs to update the status of all pending orders in the database to 'Shipped'. Which SQL command will you use to accomplish this?",
    "ImageName": null,
    "Option1": "UPDATE",
    "Option2": "MODIFY",
    "Option3": "CHANGE",
    "Option4": "EDIT",
    "Answer": 1,
    "Category": "Databases"
  },
  {
    "QnId": 24,
    "QnInWords": "While working on a data analysis project, your colleague mentioned SQL as a crucial skill. What does SQL stand for?",
    "ImageName": null,
    "Option1": "Structured Query Language",
    "Option2": "Simple Query Language",
    "Option3": "Standard Query Language",
    "Option4": "Sequential Query Language",
    "Answer": 1,
    "Category": "Databases"
  },
  {
    "QnId": 25,
    "QnInWords": "You are tasked with creating a report that combines data from multiple tables in your database. Which type of SQL operation would you use to achieve this?",
    "ImageName": null,
    "Option1": "INNER JOIN",
    "Option2": "OUTER JOIN",
    "Option3": "CROSS JOIN",
    "Option4": "All of the above",
    "Answer": 4,
    "Category": "Databases"
  },
    {
      "QnId": 26,
      "QnInWords": "In a video game, you want to ensure that various characters can have different abilities but share common attributes. Which design pattern would help achieve this? ",
      "ImageName": null,
      "Option1": "Strategy",
      "Option2": "Adapter",
      "Option3": "Facade",
      "Option4": "Composite",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 27,
      "QnInWords": "Your application needs to support multiple logging mechanisms (file, database, console) without changing the core logic. Which design pattern should you use?",
      "ImageName": null,
      "Option1": "Bridge",
      "Option2": "Singleton",
      "Option3": "Decorator",
      "Option4": "Prototype",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 28,
      "QnInWords": "You are developing a system that allows users to create various types of shapes (circle, square, triangle). Which design pattern can help with this flexibility?",
      "ImageName": null,
      "Option1": "Factory Method",
      "Option2": "Observer",
      "Option3": "Decorator",
      "Option4": "Composite",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 29,
      "QnInWords": "You want to simplify the complex interaction between a database and a UI in your application. Which design pattern would be most effective?",
      "ImageName": null,
      "Option1": "Facade",
      "Option2": "Mediator",
      "Option3": "Observer",
      "Option4": "Strategy",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 30,
      "QnInWords": "You need to create a logger that can log messages to various outputs (file, console, etc.) at runtime. Which pattern is suitable for this requirement?",
      "ImageName": null,
      "Option1": "Decorator",
      "Option2": "Singleton",
      "Option3": "Factory",
      "Option4": "Builder",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 31,
      "QnInWords": "Your team is working on a system where different formats of data need to be translated into a common format. Which design pattern should you implement?",
      "ImageName": null,
      "Option1": "Adapter",
      "Option2": "Facade",
      "Option3": "Bridge",
      "Option4": "Prototype",
      "Answer": 1,
      "Category": "Design Patterns"
    },
    {
      "QnId": 32,
      "QnInWords": "You are creating an application where a vehicle can be a car or a bike. Each type of vehicle has specific properties. Which OOP principle would you utilize?",
      "ImageName": null,
      "Option1": "Inheritance",
      "Option2": "Polymorphism",
      "Option3": "Abstraction",
      "Option4": "Encapsulation",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 33,
      "QnInWords": "In a shopping application, you want to restrict access to sensitive customer data. Which OOP principle will help you implement this restriction?",
      "ImageName": null,
      "Option1": "Encapsulation",
      "Option2": "Abstraction",
      "Option3": "Inheritance",
      "Option4": "Polymorphism",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 34,
      "QnInWords": "You are implementing a payment processing system where different payment methods need to be handled. Which OOP principle allows the system to adapt to new payment methods?",
      "ImageName": null,
      "Option1": "Polymorphism",
      "Option2": "Encapsulation",
      "Option3": "Inheritance",
      "Option4": "Abstraction",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 35,
      "QnInWords": "In your library system, you want to ensure that books and journals are treated differently despite sharing some common properties. Which principle is best?",
      "ImageName": null,
      "Option1": "Abstraction",
      "Option2": "Encapsulation",
      "Option3": "Inheritance",
      "Option4": "Polymorphism",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 36,
      "QnInWords": "You are creating a game with various characters that can perform actions differently. Which OOP concept best suits this scenario?",
      "ImageName": null,
      "Option1": "Polymorphism",
      "Option2": "Encapsulation",
      "Option3": "Inheritance",
      "Option4": "Abstraction",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 37,
      "QnInWords": "You need to implement a method that provides common functionality but allows for customization in derived classes. Which OOP principle should you use?",
      "ImageName": null,
      "Option1": "Inheritance",
      "Option2": "Encapsulation",
      "Option3": "Polymorphism",
      "Option4": "Abstraction",
      "Answer": 1,
      "Category": "Object-Oriented Programming"
    },
    {
      "QnId": 38,
      "QnInWords": "You are building a web application that requires fast retrieval of items based on a key. Which data structure is most appropriate?",
      "ImageName": null,
      "Option1": "Hash Table",
      "Option2": "Array",
      "Option3": "Queue",
      "Option4": "Stack",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 39,
      "QnInWords": "You need to store a collection of unique elements with efficient insert and lookup operations. Which data structure should you use?",
      "ImageName": null,
      "Option1": "Set",
      "Option2": "List",
      "Option3": "Array",
      "Option4": "Map",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 40,
      "QnInWords": "In a browser, you want to keep track of the pages visited in reverse order. Which data structure fits this requirement?",
      "ImageName": null,
      "Option1": "Stack",
      "Option2": "Queue",
      "Option3": "Linked List",
      "Option4": "Array",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 41,
      "QnInWords": "You are designing a task scheduler that needs to prioritize tasks based on their urgency. Which data structure is most suitable?",
      "ImageName": null,
      "Option1": "Priority Queue",
      "Option2": "Stack",
      "Option3": "Queue",
      "Option4": "Array",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 42,
      "QnInWords": "You are developing a recommendation system that requires storing relationships between users and items. Which data structure best fits this use case?",
      "ImageName": null,
      "Option1": "Graph",
      "Option2": "Tree",
      "Option3": "Array",
      "Option4": "Linked List",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 43,
      "QnInWords": "You are implementing a cache system that needs to store recent items efficiently. Which data structure would work best for this?",
      "ImageName": null,
      "Option1": "Linked List",
      "Option2": "Array",
      "Option3": "Hash Table",
      "Option4": "Tree",
      "Answer": 1,
      "Category": "Data Structures"
    },
    {
      "QnId": 44,
      "QnInWords": "You need to sort a list of names in alphabetical order. Which sorting algorithm would be most efficient for this task?",
      "ImageName": null,
      "Option1": "Quick Sort",
      "Option2": "Bubble Sort",
      "Option3": "Selection Sort",
      "Option4": "Merge Sort",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 45,
      "QnInWords": "You want to find the shortest path between two points in a weighted graph. Which algorithm should you use?",
      "ImageName": null,
      "Option1": "Dijkstra's Algorithm",
      "Option2": "Breadth-First Search",
      "Option3": "Depth-First Search",
      "Option4": "A* Algorithm",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 46,
      "QnInWords": "You are developing a system that needs to search for an item in a large sorted array. Which algorithm is most suitable?",
      "ImageName": null,
      "Option1": "Binary Search",
      "Option2": "Linear Search",
      "Option3": "Jump Search",
      "Option4": "Exponential Search",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 47,
      "QnInWords": "You are implementing a feature that requires combining two sorted lists into one sorted list. Which algorithm is most appropriate?",
      "ImageName": null,
      "Option1": "Merge",
      "Option2": "Insertion",
      "Option3": "Selection",
      "Option4": "Quick",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 48,
      "QnInWords": "You need to compute the factorial of a number using recursion. Which algorithmic technique will you employ?",
      "ImageName": null,
      "Option1": "Recursion",
      "Option2": "Iteration",
      "Option3": "Dynamic Programming",
      "Option4": "Greedy",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 49,
      "QnInWords": "You are designing a cache eviction strategy and want to use the least recently used method. Which algorithm will you implement?",
      "ImageName": null,
      "Option1": "LRU",
      "Option2": "FIFO",
      "Option3": "LFU",
      "Option4": "Random Replacement",
      "Answer": 1,
      "Category": "Algorithms"
    },
    {
      "QnId": 50,
      "QnInWords": "You are designing a database for an e-commerce application. Which type of relationship would best describe a customer who can place multiple orders?",
      "ImageName": null,
      "Option1": "One-to-Many",
      "Option2": "Many-to-One",
      "Option3": "Many-to-Many",
      "Option4": "One-to-One",
      "Answer": 1,
      "Category": "Databases"
    },
    {
      "QnId": 51,
      "QnInWords": "You need to ensure that a record cannot be duplicated in your database table. Which constraint will you use?",
      "ImageName": null,
      "Option1": "Unique",
      "Option2": "Primary Key",
      "Option3": "Foreign Key",
      "Option4": "Check",
      "Answer": 1,
      "Category": "Databases"
    },
    {
      "QnId": 52,
      "QnInWords": "Which SQL command is used to remove data from a database table?",
      "ImageName": null,
      "Option1": "DELETE",
      "Option2": "REMOVE",
      "Option3": "DROP",
      "Option4": "TRUNCATE",
      "Answer": 1,
      "Category": "Databases"
    },
    {
      "QnId": 53,
      "QnInWords": "You are creating a database schema for a library. Which type of database model would best suit this use case?",
      "ImageName": null,
      "Option1": "Relational",
      "Option2": "Document",
      "Option3": "Graph",
      "Option4": "Key-Value",
      "Answer": 1,
      "Category": "Databases"
    },
    {
      "QnId": 54,
      "QnInWords": "In a database, what is the purpose of a foreign key?",
      "ImageName": null,
      "Option1": "To link two tables",
      "Option2": "To uniquely identify a record",
      "Option3": "To ensure data integrity",
      "Option4": "To provide indexing",
      "Answer": 1,
      "Category": "Databases"
    },
    {
      "QnId": 55,
      "QnInWords": "You are optimizing a database for read operations. Which database structure would you consider using?",
      "ImageName": null,
      "Option1": "Index",
      "Option2": "Table",
      "Option3": "View",
      "Option4": "Trigger",
      "Answer": 1,
      "Category": "Databases"
    }
  ]


